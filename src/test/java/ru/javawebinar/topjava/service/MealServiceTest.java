package ru.javawebinar.topjava.service;import org.junit.Test;import org.junit.runner.RunWith;import org.slf4j.bridge.SLF4JBridgeHandler;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.dao.DataAccessException;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.context.jdbc.Sql;import org.springframework.test.context.jdbc.SqlConfig;import org.springframework.test.context.junit4.SpringRunner;import ru.javawebinar.topjava.MealTestData;import ru.javawebinar.topjava.model.Meal;import ru.javawebinar.topjava.util.exception.NotFoundException;import java.util.List;import static org.junit.Assert.assertThrows;import static ru.javawebinar.topjava.MealTestData.*;import static ru.javawebinar.topjava.UserTestData.ADMIN_ID;import static ru.javawebinar.topjava.UserTestData.USER_ID;@ContextConfiguration({        "classpath:spring/spring-app.xml",        "classpath:spring/spring-db.xml"})@RunWith(SpringRunner.class)@Sql(scripts = "classpath:db/populateDB.sql", config = @SqlConfig(encoding = "UTF-8"))public class MealServiceTest {    static {        // Only for postgres driver logging        // It uses java.util.logging and logged via jul-to-slf4j bridge        SLF4JBridgeHandler.install();    }    @Autowired    private MealService service;    @Test    public void get() {        Meal meal = service.get(ID_1, USER_ID);        assertMatch(meal, meal_1);    }    @Test    public void getNotFound() {        assertThrows(NotFoundException.class, () -> service.get(NOT_FOUND, USER_ID));    }    @Test    public void getBetweenInclusive() {        List<Meal> all = service.getBetweenInclusive(START_DATE, END_DATE, USER_ID);        assertMatch(all, meal_3, meal_2, meal_1);    }    @Test    public void getAll() {        List<Meal> all = service.getAll(USER_ID);        assertMatch(all, meal_4, meal_3, meal_2, meal_1);    }    @Test    public void anotherUserGet() {        assertThrows(NotFoundException.class, () ->                service.get(ID_1, ADMIN_ID));    }    @Test    public void delete() {        service.delete(ID_1, USER_ID);        assertThrows(NotFoundException.class, () -> service.get(ID_1, USER_ID));    }    @Test    public void deleteNotFound() {        assertThrows(NotFoundException.class, () -> service.delete(NOT_FOUND, USER_ID));    }    @Test    public void anotherUserDelete() {        assertThrows(NotFoundException.class, () ->                service.delete(ID_1, ADMIN_ID));    }    @Test    public void update() {        service.update(getUpdated(), USER_ID);        assertMatch(service.get(ID_1, USER_ID), getUpdated());    }    @Test    public void anotherUserUpdate() {        Meal updated = getUpdated();        assertThrows(NotFoundException.class, () ->                service.update(updated, ADMIN_ID));    }    @Test    public void create() {        Meal created = service.create(MealTestData.getNew(), USER_ID);        Integer newId = created.getId();        Meal newMeal = getNew();        newMeal.setId(newId);        assertMatch(created, newMeal);        assertMatch(service.get(newId, USER_ID), newMeal);    }    @Test    public void anotherDateTimecreate() {        assertThrows(DataAccessException.class, () ->                service.create(new Meal(null, meal_1.getDateTime(), "newFood", 555), USER_ID));    }}